// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  password       String
  role           String
  subscription   String?
  fontSize       String   @default("medium")
  fontFamily     String   @default("Arial")
  backgroundColor String   @default("white")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ReadingSession ReadingSession []
  Note           Note []
  Highlight      Highlight []
  QuizResult     QuizResult []
  UserBadge      UserBadge []
  Review         Review []
}

model Book {
  id          Int      @id @default(autoincrement())
  title       String
  author      String
  genre       String
  ageGroup    String
  ebookUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ReadingSession ReadingSession []
  Note           Note []
  Highlight      Highlight []
  Quiz           Quiz []
  Review         Review []
}

model ReadingSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  progress  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Highlight {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}

model Quiz {
  id          Int      @id @default(autoincrement())
  bookId      Int
  question    String
  options     String   // JSON string to store options
  answer      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  book Book @relation(fields: [bookId], references: [id])
  QuizResult QuizResult[]
}

model QuizResult {
  id        Int      @id @default(autoincrement())
  userId    Int
  quizId    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  quiz Quiz @relation(fields: [quizId], references: [id])
}

model Badge {
  id        Int      @id @default(autoincrement())
  name      String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  UserBadge UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    Int
  badgeId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  badge Badge @relation(fields: [badgeId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])
}
